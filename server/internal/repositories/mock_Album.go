// Code generated by mockery v1.0.0. DO NOT EDIT.

package repositories

import mock "github.com/stretchr/testify/mock"
import models "app/internal/models"

// MockAlbum is an autogenerated mock type for the Album type
type MockAlbum struct {
	mock.Mock
}

// FindAlbum provides a mock function with given fields: id
func (_m *MockAlbum) FindAlbum(id int) (*models.Album, error) {
	ret := _m.Called(id)

	var r0 *models.Album
	if rf, ok := ret.Get(0).(func(int) *models.Album); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlbums provides a mock function with given fields:
func (_m *MockAlbum) GetAlbums() ([]*models.Album, error) {
	ret := _m.Called()

	var r0 []*models.Album
	if rf, ok := ret.Get(0).(func() []*models.Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAlbum provides a mock function with given fields: name, artwork, artist
func (_m *MockAlbum) NewAlbum(name string, artwork string, artist models.Artist) models.Album {
	ret := _m.Called(name, artwork, artist)

	var r0 models.Album
	if rf, ok := ret.Get(0).(func(string, string, models.Artist) models.Album); ok {
		r0 = rf(name, artwork, artist)
	} else {
		r0 = ret.Get(0).(models.Album)
	}

	return r0
}
